// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using capstone_project_be.Infrastructure.Context;

#nullable disable

namespace capstone_project_be.Infrastructure.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20240306144312_UpdateDB-06032024-3")]
    partial class UpdateDB060320243
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Accommodation", b =>
                {
                    b.Property<int>("AccommodationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccommodationId"));

                    b.Property<string>("AccommodationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccommodationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccommodationLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccommodationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccommodationPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccommodationWebsite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsChildrenFriendly")
                        .HasColumnType("bit");

                    b.Property<string>("PriceLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AccommodationId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Accommodations");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.AccommodationCategory", b =>
                {
                    b.Property<int>("AccommodationCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccommodationCategoryId"));

                    b.Property<string>("AccommodationCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccommodationCategoryId");

                    b.ToTable("AccommodationCategories");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.AccommodationComment", b =>
                {
                    b.Property<int>("AccommodationCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccommodationCommentId"));

                    b.Property<int>("AccommodationId")
                        .HasColumnType("int");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit");

                    b.Property<float>("Stars")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AccommodationCommentId");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("UserId");

                    b.ToTable("AccommodationComment");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.AccommodationPhoto", b =>
                {
                    b.Property<int>("AccommodationPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccommodationPhotoId"));

                    b.Property<int>("AccommodationId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccommodationPhotoId");

                    b.HasIndex("AccommodationId");

                    b.ToTable("AccommodationPhotos");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Accommodation_AccommodationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccommodationCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("AccommodationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationCategoryId");

                    b.HasIndex("AccommodationId");

                    b.ToTable("Accommodation_AccommodationCategories");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("BlogContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.BlogCategory", b =>
                {
                    b.Property<int>("BlogCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogCategoryId"));

                    b.Property<string>("BlogCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogCategoryId");

                    b.ToTable("BlogCategories");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.BlogComment", b =>
                {
                    b.Property<int>("BlogCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogCommentId"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit");

                    b.Property<float>("Stars")
                        .HasColumnType("real");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BlogCommentId");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogComments");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.BlogPhoto", b =>
                {
                    b.Property<int>("BlogPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogPhotoId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogPhotoId");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogPhotos");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Blog_BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogCategoryId");

                    b.HasIndex("BlogId");

                    b.ToTable("Blog_BlogCatagories");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrefectureId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("PrefectureId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Prefecture", b =>
                {
                    b.Property<int>("PrefectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrefectureId"));

                    b.Property<string>("PrefectureDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefectureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("PrefectureId");

                    b.HasIndex("RegionId");

                    b.ToTable("Prefectures");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"));

                    b.Property<string>("RegionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsChildrenFriendly")
                        .HasColumnType("bit");

                    b.Property<string>("PriceLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantMenu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantWebsite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.RestaurantCategory", b =>
                {
                    b.Property<int>("RestaurantCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantCategoryId"));

                    b.Property<string>("RestaurantCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestaurantCategoryId");

                    b.ToTable("RestaurantCategories");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.RestaurantComment", b =>
                {
                    b.Property<int>("RestaurantCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantCommentId"));

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<float>("Stars")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantCommentId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("RestaurantComments");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.RestaurantPhoto", b =>
                {
                    b.Property<int>("RestaurantPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantPhotoId"));

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantPhotoId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantPhotos");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Restaurant_RestaurantCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RestaurantCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantCategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Restaurant_RestaurantCategories");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Rolename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.TouristAttraction", b =>
                {
                    b.Property<int>("TouristAttractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TouristAttractionId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TouristAttractionAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TouristAttractionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TouristAttractionLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TouristAttractionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("TouristAttractionPrice")
                        .HasColumnType("real");

                    b.Property<string>("TouristAttractionWebsite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TouristAttractionId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("TouristAttractions");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.TouristAttractionCategory", b =>
                {
                    b.Property<int>("TouristAttractionCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TouristAttractionCategoryId"));

                    b.Property<string>("TouristAttactionCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TouristAttractionCategoryId");

                    b.ToTable("TouristAttractionCategories");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.TouristAttractionComment", b =>
                {
                    b.Property<int>("TouristAttractionCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TouristAttractionCommentId"));

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit");

                    b.Property<float>("Stars")
                        .HasColumnType("real");

                    b.Property<int>("TouristAttractionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TouristAttractionCommentId");

                    b.HasIndex("TouristAttractionId");

                    b.HasIndex("UserId");

                    b.ToTable("TouristAttractionComments");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.TouristAttractionPhoto", b =>
                {
                    b.Property<int>("TouristAttractionPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TouristAttractionPhotoId"));

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TouristAttractionId")
                        .HasColumnType("int");

                    b.HasKey("TouristAttractionPhotoId");

                    b.HasIndex("TouristAttractionId");

                    b.ToTable("TouristAttractionPhotos");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.TouristAttraction_TouristAttractionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TouristAttractionCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TouristAttractionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TouristAttractionCategoryId");

                    b.HasIndex("TouristAttractionId");

                    b.ToTable("TouristAttraction_TouristAttractionCategories");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<float>("MaxBudget")
                        .HasColumnType("real");

                    b.Property<float>("MinBudget")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Trip_Accommodation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccommodationId")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("TripId");

                    b.ToTable("Trip_Accommodations");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Trip_Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("PrefectureId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PrefectureId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TripId");

                    b.ToTable("Trip_Locations");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Trip_Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("TripId");

                    b.ToTable("Trip_Restaurants");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Trip_TouristAttraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TouristAttractionId")
                        .HasColumnType("int");

                    b.Property<int>("TouristAttrationId")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TouristAttractionId");

                    b.HasIndex("TripId");

                    b.ToTable("Trip_TouristAttractions");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGoogleAuth")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.VerificationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VerificationCodeExpireTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("VerificationCodes");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Accommodation", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.City", "City")
                        .WithMany("Accommodations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone_project_be.Domain.Entities.User", "User")
                        .WithMany("Accommodations")
                        .HasForeignKey("UserId");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.AccommodationComment", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.Accommodation", "Accommodation")
                        .WithMany("AccommodationComments")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone_project_be.Domain.Entities.User", "User")
                        .WithMany("AccommodationComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.AccommodationPhoto", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.Accommodation", "Accommodation")
                        .WithMany("AccommodationPhotos")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Accommodation_AccommodationCategory", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.AccommodationCategory", "AccommodationCategory")
                        .WithMany("Accommodation_AccommodationCategories")
                        .HasForeignKey("AccommodationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone_project_be.Domain.Entities.Accommodation", "Accommodation")
                        .WithMany("Accommodation_AccommodationCategories")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("AccommodationCategory");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Blog", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.BlogComment", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.Blog", "Blog")
                        .WithMany("BlogComments")
                        .HasForeignKey("BlogId");

                    b.HasOne("capstone_project_be.Domain.Entities.User", "User")
                        .WithMany("BlogComments")
                        .HasForeignKey("UserId");

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.BlogPhoto", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.Blog", "Blog")
                        .WithMany("BlogPhotos")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Blog_BlogCategory", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.BlogCategory", "BlogCategory")
                        .WithMany("Blog_BlogCatagories")
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone_project_be.Domain.Entities.Blog", "Blog")
                        .WithMany("Blog_BlogCatagories")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("BlogCategory");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.City", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.Prefecture", "Prefecture")
                        .WithMany()
                        .HasForeignKey("PrefectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prefecture");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Prefecture", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.Region", "Region")
                        .WithMany("Prefectures")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Restaurant", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.City", "City")
                        .WithMany("Restaurants")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone_project_be.Domain.Entities.User", "User")
                        .WithMany("Restaurants")
                        .HasForeignKey("UserId");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.RestaurantComment", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("RestaurantComments")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone_project_be.Domain.Entities.User", "User")
                        .WithMany("RestaurantComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.RestaurantPhoto", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("RestaurantPhotos")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Restaurant_RestaurantCategory", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.RestaurantCategory", "RestaurantCategory")
                        .WithMany("Restaurant_RestaurantCategories")
                        .HasForeignKey("RestaurantCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone_project_be.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("Restaurant_RestaurantCategories")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("RestaurantCategory");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.TouristAttraction", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.City", "City")
                        .WithMany("TouristAttractions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone_project_be.Domain.Entities.User", "User")
                        .WithMany("TouristAttractions")
                        .HasForeignKey("UserId");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.TouristAttractionComment", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.TouristAttraction", "TouristAttraction")
                        .WithMany("TouristAttractionComments")
                        .HasForeignKey("TouristAttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone_project_be.Domain.Entities.User", "User")
                        .WithMany("TouristAttractionComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TouristAttraction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.TouristAttractionPhoto", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.TouristAttraction", "TouristAttraction")
                        .WithMany("TouristAttractionPhotos")
                        .HasForeignKey("TouristAttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TouristAttraction");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.TouristAttraction_TouristAttractionCategory", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.TouristAttractionCategory", "TouristAttactionCategory")
                        .WithMany("TouristAttraction_TouristAttractionCategories")
                        .HasForeignKey("TouristAttractionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone_project_be.Domain.Entities.TouristAttraction", "TouristAttraction")
                        .WithMany("TouristAttraction_TouristAttractionCategories")
                        .HasForeignKey("TouristAttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TouristAttactionCategory");

                    b.Navigation("TouristAttraction");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Trip", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Trip_Accommodation", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.Accommodation", "Accommodation")
                        .WithMany("Trip_Accommodations")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone_project_be.Domain.Entities.Trip", "Trip")
                        .WithMany("Trip_Accommodations")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Trip_Location", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.City", "City")
                        .WithMany("Trip_Locations")
                        .HasForeignKey("CityId");

                    b.HasOne("capstone_project_be.Domain.Entities.Prefecture", "Prefecture")
                        .WithMany("Trip_Locations")
                        .HasForeignKey("PrefectureId");

                    b.HasOne("capstone_project_be.Domain.Entities.Region", "Region")
                        .WithMany("Trip_Locations")
                        .HasForeignKey("RegionId");

                    b.HasOne("capstone_project_be.Domain.Entities.Trip", "Trip")
                        .WithMany("Trip_Locations")
                        .HasForeignKey("TripId");

                    b.Navigation("City");

                    b.Navigation("Prefecture");

                    b.Navigation("Region");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Trip_Restaurant", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("Trip_Restaurants")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone_project_be.Domain.Entities.Trip", "Trip")
                        .WithMany("Trip_Restaurants")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Trip_TouristAttraction", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.TouristAttraction", "TouristAttraction")
                        .WithMany("Trip_TouristAttractions")
                        .HasForeignKey("TouristAttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("capstone_project_be.Domain.Entities.Trip", "Trip")
                        .WithMany("Trip_TouristAttractions")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TouristAttraction");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.User", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.VerificationCode", b =>
                {
                    b.HasOne("capstone_project_be.Domain.Entities.User", "User")
                        .WithOne("VerificationCode")
                        .HasForeignKey("capstone_project_be.Domain.Entities.VerificationCode", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Accommodation", b =>
                {
                    b.Navigation("AccommodationComments");

                    b.Navigation("AccommodationPhotos");

                    b.Navigation("Accommodation_AccommodationCategories");

                    b.Navigation("Trip_Accommodations");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.AccommodationCategory", b =>
                {
                    b.Navigation("Accommodation_AccommodationCategories");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Blog", b =>
                {
                    b.Navigation("BlogComments");

                    b.Navigation("BlogPhotos");

                    b.Navigation("Blog_BlogCatagories");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.BlogCategory", b =>
                {
                    b.Navigation("Blog_BlogCatagories");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.City", b =>
                {
                    b.Navigation("Accommodations");

                    b.Navigation("Restaurants");

                    b.Navigation("TouristAttractions");

                    b.Navigation("Trip_Locations");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Prefecture", b =>
                {
                    b.Navigation("Trip_Locations");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Region", b =>
                {
                    b.Navigation("Prefectures");

                    b.Navigation("Trip_Locations");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Restaurant", b =>
                {
                    b.Navigation("RestaurantComments");

                    b.Navigation("RestaurantPhotos");

                    b.Navigation("Restaurant_RestaurantCategories");

                    b.Navigation("Trip_Restaurants");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.RestaurantCategory", b =>
                {
                    b.Navigation("Restaurant_RestaurantCategories");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.TouristAttraction", b =>
                {
                    b.Navigation("TouristAttractionComments");

                    b.Navigation("TouristAttractionPhotos");

                    b.Navigation("TouristAttraction_TouristAttractionCategories");

                    b.Navigation("Trip_TouristAttractions");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.TouristAttractionCategory", b =>
                {
                    b.Navigation("TouristAttraction_TouristAttractionCategories");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.Trip", b =>
                {
                    b.Navigation("Trip_Accommodations");

                    b.Navigation("Trip_Locations");

                    b.Navigation("Trip_Restaurants");

                    b.Navigation("Trip_TouristAttractions");
                });

            modelBuilder.Entity("capstone_project_be.Domain.Entities.User", b =>
                {
                    b.Navigation("AccommodationComments");

                    b.Navigation("Accommodations");

                    b.Navigation("BlogComments");

                    b.Navigation("Blogs");

                    b.Navigation("RestaurantComments");

                    b.Navigation("Restaurants");

                    b.Navigation("TouristAttractionComments");

                    b.Navigation("TouristAttractions");

                    b.Navigation("Trips");

                    b.Navigation("VerificationCode")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
